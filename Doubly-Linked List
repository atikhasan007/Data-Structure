#include<bits/stdc++.h>
using namespace std;
class Node
{
public:
        int data;
        Node* next;
        Node* prev;

public:
        Node(int data1, Node* next1 , Node* prev1 ){
                data = data1;
                next = next1;
                prev = prev1;
        }
        
public:
        Node(int data1){
                data = data1;
                next = nullptr;
                prev = nullptr;
        }
};


Node* convert_array_to_d_ll(vector<int>&arr){
        Node* head = new Node(arr[0]);
        Node* prev  = head;
        for(int i=1;i<arr.size();i++){
                Node* temp = new Node(arr[i],nullptr,prev);
                prev->next = temp;
                prev = temp;


        }
        return head;
}



void print(Node* head){
        while(head!=NULL){
                cout<<head->data<<" ";
                head = head->next;
        }
}

Node* delete_head(Node* head){
        if(head==NULL || head->next == NULL){
                return NULL;
        }

        Node* prev = head;
        head = head->next;
        head->prev = nullptr;
        prev->next = nullptr;
        delete prev;
        return head;

}

Node* delete_tell(Node* head){
        if(head==NULL || head->next==NULL){
                return NULL;
        }

        Node* tail = head;
        while(tail->next !=NULL){
                tail = tail->next;
        }
        Node* newTail = tail->prev;
        newTail->next = nullptr;
        tail->prev = nullptr;
        delete tail;
        return head;


}


Node* remove_kth_element(Node* head, int k){
        if(head==NULL){
                return NULL;
        }


        int cnt = 0;
        Node* k_Node = head;
        while(k_Node!=NULL){
                cnt++;
                if(cnt==k)break;
                k_Node = k_Node->next;

        }

        Node* prev = k_Node->prev;
        Node* front = k_Node->next;

        if(prev==NULL and front==NULL){
                return NULL;
        }

        else if(prev==NULL){
                return  delete_head(head);
        }
        else if(front==NULL){
                return delete_tell(head);
        }

        prev->next = front;
        front->prev = prev;

        k_Node->next = nullptr;
        k_Node->prev = nullptr;
        delete k_Node;



        return head;
}



void delete_node(Node* temp){
        Node* prev = temp->prev;
        Node* front = temp->next;

        if(front==NULL){
                prev->next = nullptr;
                temp->prev = nullptr;
                free(temp);
                return;

        }

        prev->next = front;
        front->prev = prev;
        temp->next = temp->prev = nullptr;
        free(temp);

}

Node* insert_before_head(Node* head, int val){
	Node* newHead =  new Node(val,head,nullptr);
	head = newHead;
	return head;
}

Node* insert_before_tail(Node* head, int val){
	if(head->next==NULL){
		return insert_before_head(head,val);
	}

	Node* tail = head;
	while(tail->next !=NULL){
		tail = tail->next;

	}
	 Node* prev = tail->prev;
	 Node* newNode = new Node(val,tail,prev);
	 prev->next = newNode;
	 tail->prev = newNode;
	 return head;
}

Node* insert_kth_node(Node* head, int k, int val){
        if(k==1){
        	return insert_before_head(head,val);
        }


        int cnt = 0;
        Node* temp = head;
        while(temp!=NULL){
        	cnt++;
        	if(cnt==k){
        		break;
        	}
        	temp = temp->next;
        }

         Node* prev = temp->prev;
         Node* newNode = new Node(val,temp,prev);
         prev->next = newNode;
         temp->prev = newNode;
         return head;
}


void insert_before_node(Node* node , int val){
	Node* prev = node->prev;
	Node* newNode = new Node(val,node,prev);
	prev->next = newNode;
	node->prev = newNode;
}

Node* insert_at_tail(Node* head, int k){
	if(head==NULL){
		return new Node(k);
	}
  Node* tail = head;
  while(tail->next!=NULL){
  	tail = tail->next;

  }

  Node* newNode  = new Node(k,nullptr,tail);
  tail->next = newNode;
   return head;



}

int32_t main(){
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        
        vector<int>arr = {12,5,8,7};
        Node* head = convert_array_to_d_ll(arr);
       


        head = insert_at_tail(head,56);
        print(head);
      
 
 

}  
